"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

exports.default = gulpCountStat;

var _path = require("path");

var _path2 = _interopRequireDefault(_path);

var _gulpUtil = require("gulp-util");

var _gulpUtil2 = _interopRequireDefault(_gulpUtil);

var _through = require("through2");

var _through2 = _interopRequireDefault(_through);

var _formatNumber = require("format-number");

var _formatNumber2 = _interopRequireDefault(_formatNumber);

var _countStream = require("./count-stream");

var _countStream2 = _interopRequireDefault(_countStream);

var _count = require("./count");

var _count2 = _interopRequireDefault(_count);

var _fileTree = require("./file-tree");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var PLUGIN_NAME = "gulp-count-stat";

var DEFAULT_OPTIONS = {
  words: true,
  chars: true,
  showFile: true,
  showDir: true,
  showTotal: true,
  tree: true
};

function gulpCountStat(options) {
  options = _extends({}, DEFAULT_OPTIONS, options);

  if (!options.words && !options.chars) {
    throw new _gulpUtil2.default.PluginError(PLUGIN_NAME, "Either `words` or `chars` must be true");
  }

  var fileTree = new _fileTree.FileTree();
  var total = { words: 0, chars: 0 };
  var format = (0, _formatNumber2.default)();

  function eachFile(file, enc, callback) {
    if (file.isNull()) {
      return callback(null, file);
    }
    if (file.isStream()) {
      file.contents.pipe(new _countStream2.default()).on("error", finish).on("end", function () {
        finish(null, this);
      });
      return;
    }
    if (file.isBuffer()) {
      var counts = (0, _count2.default)(file.contents, enc);
      finish(null, counts);
    }

    function finish(err, counts) {
      if (err) {
        callback(new _gulpUtil2.default.PluginError(PLUGIN_NAME, err));
        return;
      }

      var filepath = _path2.default.normalize(file.relative || file.path);
      var dirpath = _path2.default.dirname(filepath);

      var node = void 0;
      if (options.showFile) {
        node = fileTree.add(filepath);
      } else {
        node = fileTree.add(dirpath);
      }
      while (node) {
        var summary = node.data || (node.data = { words: 0, chars: 0 });
        addToSummary(counts, summary);
        node = node.parent;
        if (!options.showDir) break;
      }
      addToSummary(counts, total);

      file.countStat = counts;
      callback(null, file);
    }
  }

  function endStream(callback) {
    if (options.showFile || options.showDir) {
      fileTree.fold().sort();
      if (options.tree) {
        fileTree.walk(function (node) {
          if (node.isRoot) return;
          var prefix = node.getTreePrefix({ skipRoot: true });
          logSummary(prefix + _gulpUtil2.default.colors.cyan(node.name), node.data);
        });
      } else {
        fileTree.walkDepthFirst(function (node) {
          if (node.isRoot) return;
          if (node.data) logSummary(_gulpUtil2.default.colors.cyan(node.path), node.data);
        });
      }
    }
    if (options.showTotal) {
      logSummary(_gulpUtil2.default.colors.green("Total"), total);
    }
    callback();
  }

  function addToSummary(counts, summary) {
    summary.words += counts.words;
    summary.chars += counts.chars;
  }

  function logSummary(title, summary) {
    var logline = [title];
    if (summary) {
      logline.push(":");
      if (options.words) {
        logline.push(_gulpUtil2.default.colors.magenta(format(summary.words)), "words");
      }
      if (options.chars) {
        logline.push(_gulpUtil2.default.colors.magenta(format(summary.chars)), "characters");
      }
    }
    _gulpUtil2.default.log.apply(_gulpUtil2.default, logline);
  }

  return _through2.default.obj(eachFile, endStream);
}
module.exports = exports['default'];
//# sourceMappingURL=gulp-count-stat.js.map