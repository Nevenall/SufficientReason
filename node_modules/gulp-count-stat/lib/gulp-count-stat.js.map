{"version":3,"sources":["../src/gulp-count-stat.js"],"names":[],"mappings":"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","file":"gulp-count-stat.js","sourcesContent":["\"use strict\";\n\nimport path from \"path\";\nimport gutil from \"gulp-util\";\nimport through from \"through2\";\nimport formatNumber from \"format-number\";\nimport CountStream from \"./count-stream\";\nimport count from \"./count\";\nimport {FileTree} from \"./file-tree\";\n\nconst PLUGIN_NAME = \"gulp-count-stat\";\n\nconst DEFAULT_OPTIONS = {\n  words: true,\n  chars: true,\n  showFile: true,\n  showDir: true,\n  showTotal: true,\n  tree: true,\n};\n\nexport default function gulpCountStat(options) {\n  options = Object.assign({}, DEFAULT_OPTIONS, options);\n\n  if (!options.words && !options.chars) {\n    throw new gutil.PluginError(PLUGIN_NAME, \"Either `words` or `chars` must be true\");\n  }\n\n  const fileTree = new FileTree();\n  const total = { words: 0, chars: 0 };\n  const format = formatNumber();\n\n  function eachFile(file, enc, callback) {\n    if (file.isNull()) {\n      return callback(null, file);\n    }\n    if (file.isStream()) {\n      file.contents.pipe(new CountStream())\n        .on(\"error\", finish)\n        .on(\"end\", function () { finish(null, this) });\n      return;\n    }\n    if (file.isBuffer()) {\n      const counts = count(file.contents, enc);\n      finish(null, counts);\n    }\n\n    function finish(err, counts) {\n      if (err) {\n        callback(new gutil.PluginError(PLUGIN_NAME, err));\n        return;\n      }\n\n      const filepath = path.normalize(file.relative || file.path);\n      const dirpath = path.dirname(filepath);\n\n      let node;\n      if (options.showFile) {\n        node = fileTree.add(filepath);\n      } else {\n        node = fileTree.add(dirpath);\n      }\n      while (node) {\n        const summary = node.data || (node.data = { words: 0, chars: 0 });\n        addToSummary(counts, summary);\n        node = node.parent;\n        if (!options.showDir) break;\n      }\n      addToSummary(counts, total);\n\n      file.countStat = counts;\n      callback(null, file);\n    }\n  }\n\n  function endStream(callback) {\n    if (options.showFile || options.showDir) {\n      fileTree.fold().sort();\n      if (options.tree) {\n        fileTree.walk((node) => {\n          if (node.isRoot) return;\n          const prefix = node.getTreePrefix({ skipRoot: true });\n          logSummary(prefix + gutil.colors.cyan(node.name), node.data);\n        });\n      } else {\n        fileTree.walkDepthFirst((node) => {\n          if (node.isRoot) return;\n          if (node.data) logSummary(gutil.colors.cyan(node.path), node.data);\n        });\n      }\n    }\n    if (options.showTotal) {\n      logSummary(gutil.colors.green(\"Total\"), total);\n    }\n    callback();\n  }\n\n  function addToSummary(counts, summary) {\n    summary.words += counts.words;\n    summary.chars += counts.chars;\n  }\n\n  function logSummary(title, summary) {\n    const logline = [title];\n    if (summary) {\n      logline.push(\":\");\n      if (options.words) {\n        logline.push(gutil.colors.magenta(format(summary.words)), \"words\");\n      }\n      if (options.chars) {\n        logline.push(gutil.colors.magenta(format(summary.chars)), \"characters\");\n      }\n    }\n    gutil.log.apply(gutil, logline);\n  }\n\n  return through.obj(eachFile, endStream);\n}\n"]}