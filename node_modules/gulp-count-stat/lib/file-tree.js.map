{"version":3,"sources":["../src/file-tree.js"],"names":[],"mappings":"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","file":"file-tree.js","sourcesContent":["\"use strict\";\n\nimport path from \"path\";\n\nclass FileTree {\n  constructor(treeOrPaths = null) {\n    if (treeOrPaths instanceof Array) {\n      this.tree = new FileTreeNode();\n      this.addPaths(treeOrPaths);\n    } else {\n      this.tree = new FileTreeNode(treeOrPaths);\n    }\n  }\n\n  add(pathOrNode) {\n    if (typeof pathOrNode === \"string\") {\n      return path.normalize(pathOrNode).split(path.sep).reduce((parent, entry) => {\n        return parent.getChild(entry) || parent.addChild(entry);\n      }, this.tree);\n    } else {\n      return this.tree.addChild(pathOrNode);\n    }\n  }\n\n  addPaths(paths) {\n    return paths.map(p => this.add(p));\n  }\n\n  get(findPath) {\n    let found = null;\n    findPath = path.normalize(findPath);\n    this.walk(node => {\n      if (node.path === findPath) {\n        found = node;\n        return false;\n      }\n    });\n    return found;\n  }\n\n  toString(options = {}) {\n    const lines = this.map(node => node.toTreeString(options));\n    if (options.skipRoot) lines.shift();\n    return lines.join(\"\\n\");\n  }\n\n  toObject(options = {}) {\n    return this.tree.toObject(options);\n  }\n\n  walk(fn, {depthFirst = false, leafOnly = false} = {}) {\n    const emitNode = leafOnly ? function (node) {\n      return node.isLeaf ? fn(node) : true;\n    } : fn;\n\n    const walkNode = depthFirst ?\n      function (node) {\n        if (!node.children.every(walkNode)) return false;\n        return emitNode(node) !== false;\n      } :\n      function (node) {\n        if (emitNode(node) === false) return false;\n        return node.children.every(walkNode);\n      };\n\n    walkNode(this.tree);\n    return this;\n  }\n\n  walkDepthFirst(fn) {\n    return this.walk(fn, { depthFirst: true });\n  }\n\n  walkLeaf(fn) {\n    return this.walk(fn, { leafOnly: true });\n  }\n\n  map(fn) {\n    const results = [];\n    this.walk(node => { results.push(fn(node)) });\n    return results;\n  }\n\n  mapLeaf(fn) {\n    const results = [];\n    this.walkLeaf(node => { results.push(fn(node)) });\n    return results;\n  }\n\n  print(fn, options) {\n    if (typeof fn === \"object\") { options = fn; fn = null }\n    options = options || {};\n\n    return this.walk(node => {\n      if (options.skipRoot && node.isRoot) return;\n      const result = fn ? fn(node) : node.toTreeString(options);\n      if (typeof result === \"object\") {\n        let {prefix, suffix} = result;\n        prefix = prefix ? `${prefix} ` : \"\";\n        suffix = suffix ? ` ${suffix}` : \"\";\n        const treePrefix = node.getTreePrefix(options);\n        console.log(`${treePrefix}${prefix}${node.toString()}${suffix}`);\n      } else if (typeof result !== \"undefined\" && result !== null) {\n        console.log(result);\n      }\n    });\n  }\n\n  filter(fn) {\n    return this._transform(node => {\n      return fn(node) ? node : null;\n    });\n  }\n\n  reject(fn) {\n    return this._transform(node => {\n      return fn(node) ? null : node;\n    });\n  }\n\n  foldRoot() {\n    return this.fold(true);\n  }\n\n  fold(rootOnly = false) {\n    return this._transform(node => {\n      if ((node.isRoot || !rootOnly) && node.children.length === 1) {\n        const child = node.children[0];\n        child.name = path.join(node.name, child.name);\n        return child;\n      } else {\n        return node;\n      }\n    });\n  }\n\n  sort(compareFunction) {\n    this.tree.sort(compareFunction);\n    return this;\n  }\n\n  _transform(fn) {\n    this.tree = (function transformNode(node) {\n      let newNode = fn(node);\n      if (!newNode) {\n        return null;\n      }\n\n      if (node !== newNode) {\n        if (newNode.parent) {\n          newNode.parent.removeChild(newNode);\n        }\n        if (node.parent) {\n          node.parent.replaceChild(node, newNode);\n        }\n        return transformNode(newNode);\n      }\n\n      node.children.forEach((child, index) => {\n        const newChild = transformNode(child);\n        if (!newChild) {\n          node.removeChild(child);\n        }\n      });\n      return node;\n    })(this.tree);\n    if (!this.tree) this.tree = new FileTreeNode();\n    return this;\n  }\n}\n\nclass FileTreeNode {\n  constructor(node) {\n    node = node || {};\n    this._name = node.name || \".\";\n    this.parent = node.parent || null;\n    this.children = node.children || [];\n    this.childNameToIndex = node.childNameToIndex || {};\n    this.data = node.data || null;\n  }\n\n  get name() {\n    return this._name;\n  }\n\n  set name(newName) {\n    if (this.parent) {\n      const existChild = this.parent.getChild(newName);\n      if (existChild) {\n        this.parent.replaceChild(existChild, this);\n      } else {\n        const index = this.parent.childNameToIndex[this.name];\n        delete this.parent.childNameToIndex[this.name];\n        this.parent.childNameToIndex[newName] = index;\n      }\n    }\n    this._name = newName;\n  }\n\n  get isRoot() {\n    return !this.parent;\n  }\n\n  get isLeaf() {\n    return this.children.length === 0;\n  }\n\n  get path() {\n    if (!this.parent) return (this.name || \".\");\n    return path.join(this.parent.path, this.name);\n  }\n\n  get childIndex() {\n    if (!this.parent) return 0;\n    return this.parent.childNameToIndex[this.name] || 0;\n  }\n\n  get isFirstChild() {\n    if (!this.parent) return false;\n    return this.childIndex === 0;\n  }\n\n  get isLastChild() {\n    if (!this.parent) return false;\n    return this.childIndex === this.parent.children.length - 1;\n  }\n\n  get depth() {\n    if (!this.parent) return 0;\n    return this.parent.depth + 1;\n  }\n\n  getTreeIndent(options) {\n    if (!this.parent) return \"\";\n    options = options || {};\n    if (options.skipRoot && this.parent.isRoot) return \"\";\n    return this.parent.getTreeIndent(options) + (this.isLastChild ? \"     \" : \"│   \");\n  }\n\n  getTreePrefix(options) {\n    if (!this.parent) return \"\";\n    options = options || {};\n    if (options.skipRoot && this.parent.isRoot) return \"\";\n    return this.parent.getTreeIndent(options) + (this.isLastChild ? \"└─ \" : \"├─ \");\n  }\n\n  toString() {\n    return this.name;\n  }\n\n  toTreeString(options) {\n    return this.getTreePrefix(options) + this.name;\n  }\n\n  toObject(options) {\n    options = options || {};\n    const obj = {};\n    if (options.dataKey) { obj[options.dataKey] = this.data }\n    this.children.forEach(child => obj[child.name] = child.toObject(options));\n    return this.isRoot && this.name !== \".\" ? { [this.name]: obj } : obj;\n  }\n\n  getChild(name) {\n    const index = this.indexOfChild(name);\n    return index >= 0 ? this.children[index] : null;\n  }\n\n  indexOfChild(name) {\n    return this.childNameToIndex.hasOwnProperty(name) ?\n      this.childNameToIndex[name] : -1;\n  }\n\n  addChild(child) {\n    return this.insertChild(child, this.children.length);\n  }\n\n  sort(compareFunction) {\n    this.children.sort(compareFunction);\n    this.childNameToIndex = {};\n    this.children.forEach((child, index) => {\n      this.childNameToIndex[child.name] = index;\n      child.sort(compareFunction);\n    });\n  }\n\n  insertChild(child, index) {\n    if (typeof child === \"string\") {\n      child = new FileTreeNode({ name: child });\n    } else if (!(child instanceof FileTreeNode)) {\n      child = new FileTreeNode(child);\n    }\n\n    if (index < 0) {\n      index = this.children.length + 1 + index;\n    }\n    index = Math.max(0, Math.min(this.children.length, index));\n\n    if (child.parent && child.parent !== this) {\n      child.parent.removeChild(child);\n    }\n    child.parent = this;\n\n    const oldIndex = this.indexOfChild(child.name);\n    if (oldIndex >= 0) {\n      if (oldIndex === index) {\n        this.children[index] = child;\n      } else {\n        this.childNameToIndex[child.name] = index;\n        this.children.splice(oldIndex, 1);\n        this.children.splice(oldIndex < index ? (index - 1) : index, 0, child);\n      }\n    } else {\n      this.childNameToIndex[child.name] = index;\n      this.children.splice(index, 0, child);\n    }\n    return child;\n  }\n\n  removeChild(child) {\n    const index = this.children.indexOf(child);\n    if (index >= 0) {\n      const node = this.children[index];\n      node.parent = null;\n      this.children.splice(index, 1);\n      delete this.childNameToIndex[node.name];\n      return node;\n    } else {\n      return null;\n    }\n  }\n\n  replaceChild(oldChild, newChild) {\n    const index = this.children.indexOf(oldChild);\n    if (oldChild) {\n      this.removeChild(oldChild);\n    }\n    if (index >= 0) {\n      return this.insertChild(newChild, index);\n    } else {\n      return this.addChild(newChild);\n    }\n  }\n\n  clone() {\n    return new FileTreeNode(this);\n  }\n}\n\nfunction fileTree(paths) {\n  return new FileTree(paths);\n}\nfileTree.FileTree = FileTree;\n\nexport default fileTree;\n"]}